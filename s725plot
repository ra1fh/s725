#!/usr/bin/env python

# Copyright (C) 2016  Ralf Horstmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

import copy
import optparse
import os
import re
import sys

def bytespdate2num(fmt, encoding='ascii'):
    strconverter = mdates.strpdate2num(fmt)
    def bytesconverter(b):
        s = b.decode(encoding)
        return strconverter(s)
    return bytesconverter

def col2type(name):
    if name == 'Time':
        return (name, 'object')
    elif name == 'LR':
        return (name, '|S7')
    else:
        return (name, 'f4')

def read_txt(filename, header):
    dd = list(map(col2type, header))
    cf = bytespdate2num("%H:%M:%S")
    data = np.genfromtxt(filename, dtype=dd, names=header, converters={'Time': cf})
    return data

def read_meta(filename):
    regex = []
    regex.append(('laps',   '^#\s+Lap cumulative:\s+([0-9:]+)'))
    regex.append(('ascent', '^#\s+Ascent:\s+([0-9]+)'))
    regex.append(('mintemp','^#\s+Minimum temperature:\s+([0-9]+)'))
    regex.append(('avgtemp','^#\s+Average temperature:\s+([0-9]+)'))
    regex.append(('maxtemp','^#\s+Maximum temperature:\s+([0-9]+)'))
    regex.append(('avghr',  '^#\s+Average heart rate:\s+([0-9]+)'))
    regex.append(('maxhr',  '^#\s+Maximum heart rate:\s+([0-9]+)'))
    regex.append(('mode',   '^#\s+Mode:\s+(.+)'))
    regex.append(('header', '^#\s+(Time\s+HR.+)'))
    regex.append(('date',   '^#\s+Workout date:\s+(.+)'))
    meta = dict()
    with open(filename, 'r') as file:
        data = file.read()
        for k,r in regex:
            for m in re.finditer(r, data, re.MULTILINE):
                if meta.get(k) and isinstance(meta[k], list):
                    meta[k].append(m.group(1))
                elif meta.get(k):
                    meta[k] = [meta[k]]
                    meta[k].append(m.group(1))
                else:
                    meta[k] = m.group(1)
    # laps postprocessing
    if meta.get('laps') and isinstance(meta['laps'], list):
        meta['laps'] = meta['laps'][0:-1]
    else:
        meta['laps'] = []
    # header postprocessing
    if meta.get('header'):
        meta['header'] = re.split('\s+', meta['header'])
    else:
        meta['header'] = []
    return meta

def xborder(x):
    diff = x[-1] - x[0]
    border = 0.03
    return (x[0] - diff * border, x[-1] + diff * border)

def plot_time_alt(data, filename, output, laps=[], title=None):
    time = data['Time']
    alt = data['Alt']
    xmin, xmax = xborder(time)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot_date(x=time, y=alt, fmt="r-", color='#007000')
    for lap in laps:
        ax.axvline(lap, ymin=0, ymax=1, linestyle='--', color='#505050')
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Time (h)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Altitude (m)")
    ax.set_ylim([min(alt) - 50, max(alt) + 50])
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_time_hr(data, filename, output, laps=[], title=None):
    time = data['Time']
    hr = data['HR']
    xmin, xmax = xborder(time)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot_date(x=time, y=hr, label='HR', fmt="r-", color='#700000')
    ax.axhline(np.mean(hr), xmin=0, xmax=1, linestyle='--', color='#505050')
    for lap in laps:
        ax.axvline(lap, ymin=0, ymax=1, linestyle='--', color='#505050')
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Time (h)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Heart Rate (bpm)")
    ax.set_ylim([30,210])
    ax.set_yticks([40,60,80,100,120,140,160,180,200])
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_time_spd(data, filename, output, laps=[], title=None):
    time = data['Time']
    spd = data['Spd']
    xmin, xmax = xborder(time)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot_date(x=time, y=spd, fmt="r-", color='#000070')
    for lap in laps:
        ax.axvline(lap, ymin=0, ymax=1, linestyle='--', color='#505050')
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Time (h)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Speed (km/h)")
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_time_vam(data, filename, output, laps=[], title=None):
    time = data['Time']
    vam = data['VAM']
    xmin, xmax = xborder(time)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot_date(x=time, y=vam, fmt="r-", color='#700000')
    for lap in laps:
        ax.axvline(lap, ymin=0, ymax=1, linestyle='--', color='#505050')
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Time (h)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("VAM (m/h)")
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_hist(data, filename, output, title=None):
    x = data['HR']
    y = data['Time']
    bins = [ 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205 ]
    ticks = [40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]
    weight = [round(((y[1] - y[0]) * 60 * 24), 2) for i in x]

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    n, bins, patches = ax.hist(x, bins, weights=weight, normed=False, facecolor='blue', alpha=0.5)
    ax.set_xticks(ticks)
    ax.set_xlim([30,210])
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Heart Rate (bpm)")
    ax.set_ylabel("Histogram (minutes)")
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_dist_alt(data, filename, output, laps=[], title=None):
    dist = data['Dist']
    alt = data['Alt']
    xmin, xmax = xborder(dist)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot(dist, alt, label='Alt', color='#007000')
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Dist (km)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Altitude (m)")
    ax.set_ylim([min(alt) - 50, max(alt) + 50])
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_dist_hr(data, filename, output, laps=[], title=None):
    dist = data['Dist']
    hr = data['HR']
    xmin, xmax = xborder(dist)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot(dist, hr, label='HR', color='#700000')
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Dist (km)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Hear Rate (bpm)")
    ax.set_ylim([30,210])
    ax.set_yticks([40,60,80,100,120,140,160,180,200])
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)

def plot_dist_spd(data, filename, output, laps=[], title=None):
    dist = data['Dist']
    spd = data['Spd']
    xmin, xmax = xborder(dist)

    fig, ax = plt.subplots()
    fig.set_figwidth(8.0)
    fig.set_figheight(5.0)

    ax.plot(dist, spd, label='Spd', color='#000070')
    if title:
        ax.set_title(title)
    else:
        ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Dist (km)")
    ax.set_xlim([xmin, xmax])
    ax.set_ylabel("Speed (km/h)")
    ax.grid(True)
    fig.savefig(output, dpi=90)
    print(output)


if __name__ == "__main__":
    usage = "s725plot <INPUT> <OUTPUT DIRECTORY>"
    parser = optparse.OptionParser(usage)
    opts, args = parser.parse_args(sys.argv[1:])

    if len(args) < 2:
        parser.print_help()
        sys.exit(1)

    filename = args[0]
    directory = os.path.normpath(os.path.expanduser(args[1])) + '/'
    base = os.path.splitext(os.path.basename(filename))[0]

    meta = read_meta(filename)
    laps = list(map(mdates.strpdate2num("%H:%M:%S"), meta['laps']))
    header = meta['header']
    if len(header) < 2:
        print("error: invalid header line: \"" + " ".join(header) + "\"")
        sys.exit(1)
    if not 'Time' in header:
        print("error: data file does not contain time column")
        sys.exit(1)

    if meta.get('date'):
        title = meta['date']
    else:
        title = base

    data = read_txt(filename, header)
    if data.size < 2:
        print("error: data file contains less then two samples")
        sys.exit(1)

    if 'Alt' in header and max(data['Alt']) > 0:
        plot_time_alt(data, filename, directory + base + "-time-alt.png", laps=laps, title=title)
    if 'HR' in header and max(data['HR']) > 0:
        plot_time_hr(data, filename, directory + base + "-time-hr.png", laps=laps, title=title)
    if 'Spd' in header and max(data['Spd']) > 0:
        plot_time_spd(data, filename, directory + base + "-time-spd.png", laps=laps, title=title)
    if 'VAM' in header and max(data['VAM']) > 0:
        plot_time_vam(data, filename, directory + base + "-time-vam.png", laps=laps, title=title)

    if 'HR' in header and max(data['HR']) > 0:
        plot_hist(data, filename, directory + base + "-hist.png", title=title)

    if 'Dist' in header and max(data['Dist'] > 0):
        if 'Alt' in header and max(data['Spd']) > 0:
            plot_dist_alt(data, filename, directory + base + "-dist-alt.png", laps=laps, title=title)
        if 'HR' in header and max(data['HR']) > 0:
            plot_dist_hr(data, filename, directory + base + "-dist-hr.png", laps=laps, title=title)
        if 'Spd' in header and max(data['Spd']) > 0:
            plot_dist_spd(data, filename, directory + base + "-dist-spd.png", laps=laps, title=title)

