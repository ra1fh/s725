#!/usr/bin/env python

# Copyright (C) 2016  Ralf Horstmann
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

import copy
import os
import sys

def usage():
    print("usage: s725plot <input> <output directory>")
    sys.exit()

def bytespdate2num(fmt, encoding='ascii'):
    strconverter = mdates.strpdate2num(fmt)
    def bytesconverter(b):
        s = b.decode(encoding)
        return strconverter(s)
    return bytesconverter
    
def read(filename):
    ch = ['time', 'hr', 'alt', 'vam', 'spd', 'dist']
    dd = [(ch[0], 'object')] + [(a, 'f4') for a in ch[1:]]
    cf = bytespdate2num("%H:%M:%S")
    data = np.genfromtxt(filename, dtype=dd, names=ch, converters={'time': cf})
    return data
    
def plothr(data, filename, output):
    hr = data['hr']
    x_data = data['time']
    x_mean = copy.copy(x_data)
    x_mean[0]  = min(x_data) - 15.0/(24*60)
    x_mean[-1] = max(x_data) + 15.0/(24*60)
    mean = [np.mean(hr) for i in x_mean]
    fig, ax = plt.subplots()
    fig.set_figwidth(9.0)
    fig.set_figheight(5.0)
    data_line, = ax.plot_date(x=x_data, y=hr, label='HR', fmt="r-")
    data_line.set_color('#700000')
    mean_line, = ax.plot(x_mean, mean, label='Mean: ' + str(mean[0]), linestyle='--')
    mean_line.set_color('#505050')
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    ax.set_title(os.path.basename(filename))
    ax.set_xlabel("Time (h)")
    ax.set_ylabel("Heart Rate (bpm)")
    ax.set_xlim([min(x_data) - 15.0/(24*60), max(x_data) + 15.0/(24*60)])
    ax.set_ylim([30,210])
    ax.set_yticks([40,60,80,100,120,140,160,180,200])
    ax.grid(True)
    ax.legend(loc='upper right')
    fig.savefig(output)
    print(output)

def plotalt(data, filename, output):
    x = data['time']
    y = data['alt']
    fig, ax = plt.subplots(1)
    fig.set_figwidth(9.0)
    fig.set_figheight(5.0)
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    data_line, = plt.plot_date(x=x, y=y, fmt="r-")
    data_line.set_color('#007000')
    plt.title(os.path.basename(filename))
    plt.ylabel("Altitude (m)")
    plt.xlim([min(x) - 15.0/(24*60), max(x) + 15.0/(24*60)])
    plt.ylim([min(y) - 50, max(y) + 50])
    plt.xlabel("Time (h)")
    plt.grid(True)
    plt.savefig(output)
    print(output)

def plothist(data, filename, output):
    x = data['hr']
    y = data['time']
    fig, ax = plt.subplots(1)
    fig = plt.figure(figsize=(9.0, 5.0))
    fig.set_figwidth(9.0)
    fig.set_figheight(5.0)
    bins = [ 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205 ]
    ticks = [40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]
    n, bins, patches = plt.hist(x, bins, normed=False, facecolor='blue', alpha=0.5)
    plt.xticks(ticks)
    plt.xlim([30,210])
    plt.title(os.path.basename(filename))
    plt.xlabel("Heart Rate (bpm)")
    plt.ylabel("Histogram (minutes)")
    plt.grid(True)
    plt.savefig(output)
    print(output)
    
def main(argv):
    if len(argv) < 3:
        usage()
    filename = argv[1]
    directory = os.path.normpath(os.path.expanduser(argv[2])) + '/'
    data = read(filename)
    base = os.path.splitext(os.path.basename(filename))[0]
    print("input: " + filename)
    plothr(data, filename, directory + base + "-hr.png")
    plotalt(data, filename, directory + base + "-alt.png")
    plothist(data, filename, directory + base + "-hist.png")

main(sys.argv)
